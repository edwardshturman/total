generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  image     String?
  items     Item[]   @relation("UserItems")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Item {
  id                   String    @id
  accessToken          String
  encryptionKeyVersion String
  institutionName      String
  accounts             Account[] @relation("ItemAccounts")
  cursor               Cursor?   @relation("ItemToCursor")
  userId               String
  user                 User      @relation("UserItems", fields: [userId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now())
}

model Account {
  id           String        @id
  name         String
  mask         String?
  itemId       String
  item         Item          @relation("ItemAccounts", fields: [itemId], references: [id])
  transactions Transaction[] @relation("AccountTransactions")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
}

model Transaction {
  id                            String                       @id
  accountId                     String
  primaryTransactionCategoryId  String?
  detailedTransactionCategoryId String?
  currencyCode                  String
  amount                        Decimal
  date                          DateTime                     @default(now())
  name                          String
  pending                       Boolean
  account                       Account                      @relation("AccountTransactions", fields: [accountId], references: [id])
  createdAt                     DateTime                     @default(now())
  updatedAt                     DateTime                     @default(now())
  primaryTransactionCategory    PrimaryTransactionCategory?  @relation("PrimaryTransactionCategoryTransactions", fields: [primaryTransactionCategoryId], references: [id])
  detailedTransactionCategory   DetailedTransactionCategory? @relation("DetailedTransactionCategoryTransactions", fields: [detailedTransactionCategoryId], references: [id])
}

model PrimaryTransactionCategory {
  id                            String                        @id @default(uuid())
  name                          String                        @unique
  detailedTransactionCategories DetailedTransactionCategory[] @relation("PrimaryTransactionCategoryDetailedTransactionCategories")
  transactions                  Transaction[]                 @relation("PrimaryTransactionCategoryTransactions")
}

model DetailedTransactionCategory {
  id                           String                     @id @default(uuid())
  primaryTransactionCategoryId String
  name                         String                     @unique
  description                  String?
  primaryTransactionCategory   PrimaryTransactionCategory @relation("PrimaryTransactionCategoryDetailedTransactionCategories", fields: [primaryTransactionCategoryId], references: [id])
  transactions                 Transaction[]              @relation("DetailedTransactionCategoryTransactions")
}

model Cursor {
  itemId    String   @id
  item      Item     @relation("ItemToCursor", fields: [itemId], references: [id])
  string    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
